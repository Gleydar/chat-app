plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

group = 'edu.hm'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

def buildFrontend = !isAngularDevServerRunning()

repositories {
    mavenCentral()
}

def frontendOutput = "${project(':frontend').projectDir}/dist"
sourceSets {
    main {
        resources {
            srcDirs = ["$frontendOutput", "$projectDir/src/main/resources"]
        }
    }
}

processResources {
    if (buildFrontend) {
        dependsOn ':frontend:buildFrontend'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    compile 'io.jsonwebtoken:jjwt-api:0.11.1'
    runtime 'io.jsonwebtoken:jjwt-impl:0.11.1',
            'io.jsonwebtoken:jjwt-jackson:0.11.1'
    compile 'org.jboss.aerogear:aerogear-otp-java:1.0.0'
    compile 'org.apache.commons:commons-lang3:3.10'
}

test {
    useJUnitPlatform()
}

static def isAngularDevServerRunning() {
    ServerSocket ss = null;
    DatagramSocket ds = null;
    try {
        ss = new ServerSocket(4200);
        ss.setReuseAddress(true);
        ds = new DatagramSocket(4200);
        ds.setReuseAddress(true);
        return false;
    } catch (IOException ignored) {
    } finally {
        if (ds != null) {
            ds.close();
        }
        if (ss != null) {
            try {
                ss.close();
            } catch (IOException ignored) {
            }
        }
    }

    return true;
}
